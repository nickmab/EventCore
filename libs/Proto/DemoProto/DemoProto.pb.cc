// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DemoProto.proto

#include "DemoProto.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_DemoProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NumericMessage_DemoProto_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_DemoProto_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextualMessage_DemoProto_2eproto;
namespace demoproto {
class NumericMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NumericMessage> _instance;
} _NumericMessage_default_instance_;
class TextualMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TextualMessage> _instance;
} _TextualMessage_default_instance_;
class WrappedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WrappedMessage> _instance;
  const ::demoproto::NumericMessage* numeric_message_;
  const ::demoproto::TextualMessage* textual_message_;
} _WrappedMessage_default_instance_;
}  // namespace demoproto
static void InitDefaultsscc_info_NumericMessage_DemoProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demoproto::_NumericMessage_default_instance_;
    new (ptr) ::demoproto::NumericMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demoproto::NumericMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NumericMessage_DemoProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NumericMessage_DemoProto_2eproto}, {}};

static void InitDefaultsscc_info_TextualMessage_DemoProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demoproto::_TextualMessage_default_instance_;
    new (ptr) ::demoproto::TextualMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demoproto::TextualMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TextualMessage_DemoProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TextualMessage_DemoProto_2eproto}, {}};

static void InitDefaultsscc_info_WrappedMessage_DemoProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::demoproto::_WrappedMessage_default_instance_;
    new (ptr) ::demoproto::WrappedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::demoproto::WrappedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_WrappedMessage_DemoProto_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_WrappedMessage_DemoProto_2eproto}, {
      &scc_info_NumericMessage_DemoProto_2eproto.base,
      &scc_info_TextualMessage_DemoProto_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_DemoProto_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_DemoProto_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_DemoProto_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_DemoProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demoproto::NumericMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demoproto::NumericMessage, an_integer_),
  PROTOBUF_FIELD_OFFSET(::demoproto::NumericMessage, a_double_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demoproto::TextualMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::demoproto::TextualMessage, is_interesting_),
  PROTOBUF_FIELD_OFFSET(::demoproto::TextualMessage, a_sentence_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::demoproto::WrappedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::demoproto::WrappedMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::demoproto::WrappedMessageDefaultTypeInternal, numeric_message_),
  offsetof(::demoproto::WrappedMessageDefaultTypeInternal, textual_message_),
  PROTOBUF_FIELD_OFFSET(::demoproto::WrappedMessage, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::demoproto::NumericMessage)},
  { 7, -1, sizeof(::demoproto::TextualMessage)},
  { 14, -1, sizeof(::demoproto::WrappedMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demoproto::_NumericMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demoproto::_TextualMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::demoproto::_WrappedMessage_default_instance_),
};

const char descriptor_table_protodef_DemoProto_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017DemoProto.proto\022\tdemoproto\"6\n\016NumericM"
  "essage\022\022\n\nan_integer\030\001 \001(\005\022\020\n\010a_double\030\002"
  " \001(\001\"<\n\016TextualMessage\022\026\n\016is_interesting"
  "\030\001 \001(\010\022\022\n\na_sentence\030\002 \001(\t\"\203\001\n\016WrappedMe"
  "ssage\0224\n\017numeric_message\030\001 \001(\0132\031.demopro"
  "to.NumericMessageH\000\0224\n\017textual_message\030\002"
  " \001(\0132\031.demoproto.TextualMessageH\000B\005\n\003msg"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_DemoProto_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_DemoProto_2eproto_sccs[3] = {
  &scc_info_NumericMessage_DemoProto_2eproto.base,
  &scc_info_TextualMessage_DemoProto_2eproto.base,
  &scc_info_WrappedMessage_DemoProto_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_DemoProto_2eproto_once;
static bool descriptor_table_DemoProto_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DemoProto_2eproto = {
  &descriptor_table_DemoProto_2eproto_initialized, descriptor_table_protodef_DemoProto_2eproto, "DemoProto.proto", 288,
  &descriptor_table_DemoProto_2eproto_once, descriptor_table_DemoProto_2eproto_sccs, descriptor_table_DemoProto_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_DemoProto_2eproto::offsets,
  file_level_metadata_DemoProto_2eproto, 3, file_level_enum_descriptors_DemoProto_2eproto, file_level_service_descriptors_DemoProto_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_DemoProto_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_DemoProto_2eproto), true);
namespace demoproto {

// ===================================================================

void NumericMessage::InitAsDefaultInstance() {
}
class NumericMessage::_Internal {
 public:
};

NumericMessage::NumericMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demoproto.NumericMessage)
}
NumericMessage::NumericMessage(const NumericMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&a_double_, &from.a_double_,
    static_cast<size_t>(reinterpret_cast<char*>(&an_integer_) -
    reinterpret_cast<char*>(&a_double_)) + sizeof(an_integer_));
  // @@protoc_insertion_point(copy_constructor:demoproto.NumericMessage)
}

void NumericMessage::SharedCtor() {
  ::memset(&a_double_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&an_integer_) -
      reinterpret_cast<char*>(&a_double_)) + sizeof(an_integer_));
}

NumericMessage::~NumericMessage() {
  // @@protoc_insertion_point(destructor:demoproto.NumericMessage)
  SharedDtor();
}

void NumericMessage::SharedDtor() {
}

void NumericMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NumericMessage& NumericMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NumericMessage_DemoProto_2eproto.base);
  return *internal_default_instance();
}


void NumericMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:demoproto.NumericMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a_double_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&an_integer_) -
      reinterpret_cast<char*>(&a_double_)) + sizeof(an_integer_));
  _internal_metadata_.Clear();
}

const char* NumericMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 an_integer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          an_integer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double a_double = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          a_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NumericMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demoproto.NumericMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 an_integer = 1;
  if (this->an_integer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_an_integer(), target);
  }

  // double a_double = 2;
  if (!(this->a_double() <= 0 && this->a_double() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_a_double(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demoproto.NumericMessage)
  return target;
}

size_t NumericMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demoproto.NumericMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double a_double = 2;
  if (!(this->a_double() <= 0 && this->a_double() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 an_integer = 1;
  if (this->an_integer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_an_integer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NumericMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demoproto.NumericMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const NumericMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NumericMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demoproto.NumericMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demoproto.NumericMessage)
    MergeFrom(*source);
  }
}

void NumericMessage::MergeFrom(const NumericMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demoproto.NumericMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.a_double() <= 0 && from.a_double() >= 0)) {
    _internal_set_a_double(from._internal_a_double());
  }
  if (from.an_integer() != 0) {
    _internal_set_an_integer(from._internal_an_integer());
  }
}

void NumericMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demoproto.NumericMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumericMessage::CopyFrom(const NumericMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demoproto.NumericMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumericMessage::IsInitialized() const {
  return true;
}

void NumericMessage::InternalSwap(NumericMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(a_double_, other->a_double_);
  swap(an_integer_, other->an_integer_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NumericMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TextualMessage::InitAsDefaultInstance() {
}
class TextualMessage::_Internal {
 public:
};

TextualMessage::TextualMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demoproto.TextualMessage)
}
TextualMessage::TextualMessage(const TextualMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_a_sentence().empty()) {
    a_sentence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_sentence_);
  }
  is_interesting_ = from.is_interesting_;
  // @@protoc_insertion_point(copy_constructor:demoproto.TextualMessage)
}

void TextualMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TextualMessage_DemoProto_2eproto.base);
  a_sentence_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_interesting_ = false;
}

TextualMessage::~TextualMessage() {
  // @@protoc_insertion_point(destructor:demoproto.TextualMessage)
  SharedDtor();
}

void TextualMessage::SharedDtor() {
  a_sentence_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TextualMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TextualMessage& TextualMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TextualMessage_DemoProto_2eproto.base);
  return *internal_default_instance();
}


void TextualMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:demoproto.TextualMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_sentence_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_interesting_ = false;
  _internal_metadata_.Clear();
}

const char* TextualMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_interesting = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_interesting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string a_sentence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_a_sentence();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "demoproto.TextualMessage.a_sentence"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TextualMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demoproto.TextualMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_interesting = 1;
  if (this->is_interesting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_interesting(), target);
  }

  // string a_sentence = 2;
  if (this->a_sentence().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_a_sentence().data(), static_cast<int>(this->_internal_a_sentence().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "demoproto.TextualMessage.a_sentence");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_a_sentence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demoproto.TextualMessage)
  return target;
}

size_t TextualMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demoproto.TextualMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string a_sentence = 2;
  if (this->a_sentence().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a_sentence());
  }

  // bool is_interesting = 1;
  if (this->is_interesting() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TextualMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demoproto.TextualMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TextualMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TextualMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demoproto.TextualMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demoproto.TextualMessage)
    MergeFrom(*source);
  }
}

void TextualMessage::MergeFrom(const TextualMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demoproto.TextualMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.a_sentence().size() > 0) {

    a_sentence_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.a_sentence_);
  }
  if (from.is_interesting() != 0) {
    _internal_set_is_interesting(from._internal_is_interesting());
  }
}

void TextualMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demoproto.TextualMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TextualMessage::CopyFrom(const TextualMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demoproto.TextualMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextualMessage::IsInitialized() const {
  return true;
}

void TextualMessage::InternalSwap(TextualMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  a_sentence_.Swap(&other->a_sentence_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_interesting_, other->is_interesting_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TextualMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WrappedMessage::InitAsDefaultInstance() {
  ::demoproto::_WrappedMessage_default_instance_.numeric_message_ = const_cast< ::demoproto::NumericMessage*>(
      ::demoproto::NumericMessage::internal_default_instance());
  ::demoproto::_WrappedMessage_default_instance_.textual_message_ = const_cast< ::demoproto::TextualMessage*>(
      ::demoproto::TextualMessage::internal_default_instance());
}
class WrappedMessage::_Internal {
 public:
  static const ::demoproto::NumericMessage& numeric_message(const WrappedMessage* msg);
  static const ::demoproto::TextualMessage& textual_message(const WrappedMessage* msg);
};

const ::demoproto::NumericMessage&
WrappedMessage::_Internal::numeric_message(const WrappedMessage* msg) {
  return *msg->msg_.numeric_message_;
}
const ::demoproto::TextualMessage&
WrappedMessage::_Internal::textual_message(const WrappedMessage* msg) {
  return *msg->msg_.textual_message_;
}
void WrappedMessage::set_allocated_numeric_message(::demoproto::NumericMessage* numeric_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (numeric_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      numeric_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric_message, submessage_arena);
    }
    set_has_numeric_message();
    msg_.numeric_message_ = numeric_message;
  }
  // @@protoc_insertion_point(field_set_allocated:demoproto.WrappedMessage.numeric_message)
}
void WrappedMessage::set_allocated_textual_message(::demoproto::TextualMessage* textual_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_msg();
  if (textual_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      textual_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textual_message, submessage_arena);
    }
    set_has_textual_message();
    msg_.textual_message_ = textual_message;
  }
  // @@protoc_insertion_point(field_set_allocated:demoproto.WrappedMessage.textual_message)
}
WrappedMessage::WrappedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:demoproto.WrappedMessage)
}
WrappedMessage::WrappedMessage(const WrappedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kNumericMessage: {
      _internal_mutable_numeric_message()->::demoproto::NumericMessage::MergeFrom(from._internal_numeric_message());
      break;
    }
    case kTextualMessage: {
      _internal_mutable_textual_message()->::demoproto::TextualMessage::MergeFrom(from._internal_textual_message());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:demoproto.WrappedMessage)
}

void WrappedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WrappedMessage_DemoProto_2eproto.base);
  clear_has_msg();
}

WrappedMessage::~WrappedMessage() {
  // @@protoc_insertion_point(destructor:demoproto.WrappedMessage)
  SharedDtor();
}

void WrappedMessage::SharedDtor() {
  if (has_msg()) {
    clear_msg();
  }
}

void WrappedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WrappedMessage& WrappedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WrappedMessage_DemoProto_2eproto.base);
  return *internal_default_instance();
}


void WrappedMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:demoproto.WrappedMessage)
  switch (msg_case()) {
    case kNumericMessage: {
      delete msg_.numeric_message_;
      break;
    }
    case kTextualMessage: {
      delete msg_.textual_message_;
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void WrappedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:demoproto.WrappedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear();
}

const char* WrappedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .demoproto.NumericMessage numeric_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .demoproto.TextualMessage textual_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_textual_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WrappedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:demoproto.WrappedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .demoproto.NumericMessage numeric_message = 1;
  if (_internal_has_numeric_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::numeric_message(this), target, stream);
  }

  // .demoproto.TextualMessage textual_message = 2;
  if (_internal_has_textual_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::textual_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:demoproto.WrappedMessage)
  return target;
}

size_t WrappedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:demoproto.WrappedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .demoproto.NumericMessage numeric_message = 1;
    case kNumericMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.numeric_message_);
      break;
    }
    // .demoproto.TextualMessage textual_message = 2;
    case kTextualMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.textual_message_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WrappedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:demoproto.WrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const WrappedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WrappedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:demoproto.WrappedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:demoproto.WrappedMessage)
    MergeFrom(*source);
  }
}

void WrappedMessage::MergeFrom(const WrappedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:demoproto.WrappedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kNumericMessage: {
      _internal_mutable_numeric_message()->::demoproto::NumericMessage::MergeFrom(from._internal_numeric_message());
      break;
    }
    case kTextualMessage: {
      _internal_mutable_textual_message()->::demoproto::TextualMessage::MergeFrom(from._internal_textual_message());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void WrappedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:demoproto.WrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WrappedMessage::CopyFrom(const WrappedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:demoproto.WrappedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WrappedMessage::IsInitialized() const {
  return true;
}

void WrappedMessage::InternalSwap(WrappedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WrappedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace demoproto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::demoproto::NumericMessage* Arena::CreateMaybeMessage< ::demoproto::NumericMessage >(Arena* arena) {
  return Arena::CreateInternal< ::demoproto::NumericMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::demoproto::TextualMessage* Arena::CreateMaybeMessage< ::demoproto::TextualMessage >(Arena* arena) {
  return Arena::CreateInternal< ::demoproto::TextualMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::demoproto::WrappedMessage* Arena::CreateMaybeMessage< ::demoproto::WrappedMessage >(Arena* arena) {
  return Arena::CreateInternal< ::demoproto::WrappedMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
